#!/usr/bin/env python
#
# (c) 2008-2011 Nick Welch <nick@incise.org>
# (c) 2014 tokiclover/-tclover <at-gmail-dot-com>
#
# HOMEPAGE: https://github.com/tokiclover/mpris-remote
# COPYING: NO COPYRIGHT - CC0-1.0 *or* 'public domain', to be more readable,
# as uplished by Creative Common: http://creativecommons.org/publicdomain/zero/1.0
#

usage = """
USAGE: mpris-remote [options] [command]

OPTIONS:
   -p, --player=name   set the player name to pick up at runtime
   -?, -h, --help      print this help message and exit
COMMANDS:
  [no command]         prints current remote player status, song playing, etc

  prev[ious]           go to previous track
  next                 go to next track
  stop                 stop playback
  play                 start playback
  pause                pause playback
  toggle               toggle playback

  metadata             print metadata for current track
  trackinfo <track#>   print metadata for given track
  trackinfo ['*']       print metadata for all tracks

  volume [<0..100>]    print or set volume
  loop [true|false]       print or set whether or not player will loop track list
  shuffle [false|true] print or set random / shuffle mode

  addtrack <uri>       add a track uri (depend on particular support)
  deltrack <track#>       delete specified track
  clear                   clear playlist

  setposition <t> <p>  set position postion of <t> track to <p> position
  seek <time>           seek to position in current track [hh:][mm:][ss:][.ms]

  tracknum             print track number of current track
  numtracks               print total number of tracks in track list
  playstatus           print player status, paused, or stopped, etc

  identity               print identity of player (e.g. name and version)
  quit                   cause player to exit

MPRIS_PLAYER:          set remote player by this environment variable
WARNING:               track numbers begin at 0 while playing start at 1
"""

import os, sys, re, time, urllib2, dbus

mpris = ['org.mpris.MediaPlayer2']
for name in ['Player','Playerlists','TrackList']:
    mpris.append(mpris[0] + '.' + name)
mpris.append('/' + re.sub('\.', '/', mpris[0]))
mpris.append('org.freedesktop.DBus.Properties')

class BadUserInput(Exception):
    pass

# argument type/content validity checkers

class is_int(object):
    @staticmethod
    def type_desc(remote):
        return 'an integer'

    def __init__(self, remote, arg):
        int(arg)

class is_boolean(object):
    @staticmethod
    def type_desc(remote):
        return 'a boolean'

    def __init__(self, remote, arg):
        if arg not in ('true', 'false'):
            raise ValueError

class is_zero_to_100(object):
    @staticmethod
    def type_desc(remote):
        return 'an integer within [0..100]'

    def __init__(self, remote, arg):
        if not 0 <= int(arg) <= 100:
            raise ValueError

class is_track_num(object):
    @staticmethod
    def type_desc(remote):
        if len(remote.tracklist_list) > 0:
            return 'an integer within [0..%d] (current playlist size is %d)' \
                % (len(remote.tracklist_list)-1, len(remote.tracklist_list))
        elif len(remote.tracklist_list) == 0:
            return 'an integer within [0..<tracklist length>], ' \
                        'although the current track list is empty, so ' \
                        'no track number would currently be valid'
        else:
            return 'an integer within [0..<tracklist length>] (current tracklist length is unavailable)'

    def __init__(self, remote, arg):
        int(arg)
        if len(remote.tracklist_list) == 0:
            return # not much we can do; just assume it's okay to pass along
        if not 0 <= int(arg) < len(remote.tracklist_list):
            raise ValueError

class is_track_num_or_star(object):
    @staticmethod
    def type_desc(remote):
        return is_track_num.type_desc(remote) + "\n\nOR a '*' to indicate all tracks"

    def __init__(self, remote, arg):
        if arg != '*':
            is_track_num(remote, arg)

class is_valid_uri(object):
    @staticmethod
    def type_desc(remote):
        return 'a valid URI (media file, playlist file, stream URI, or directory)'

    def __init__(self, remote, arg):
        if arg.startswith('file://'):
            arg = urllib2.unquote(arg.partition('file://')[2])

        # arbitrary uri, don't wanna hardcode possible protocols
        if re.match(r'\w+://.*', arg):
            return

        if os.path.isfile(arg) or os.path.isdir(arg) or arg == '-':
            return

        raise ValueError

# wrong argument(s) explanation decorators

def explain_numargs(*forms):
    def wrapper(meth):
        def new(self, *args):
            if len(args) not in forms:
                s = ' or '.join(map(str, forms))
                raise BadUserInput("%s takes %s argument(s)." % (meth.func_name, s))
            return meth(self, *args)
        new.func_name = meth.func_name
        return new
    return wrapper

def explain_argtype(i, typeclass, optional=False):
    def wrapper(meth):
        def new(remote_self, *args):
            if not optional or len(args) > i:
                try:
                    typeclass(remote_self, args[i])
                except:
                    raise BadUserInput("argument %d to %s must be %s." % \
                    (i+1, meth.func_name, typeclass.type_desc(remote_self)))
            return meth(remote_self, *args)
        new.func_name = meth.func_name
        return new
    return wrapper

# and the core

def format_time(rawms):
    min = rawms / 1000 / 60
    sec = rawms / 1000 % 60
    ms = rawms % 1000
    return "%d:%02d.%03d" % (min, sec, ms)


def playstatus_from_int(n):
    return ['playing', 'paused', 'stopped'][n]

class NoTrackCurrentlySelected(Exception):
    pass

def format_metadata(dct):
    lines = []
    for k in sorted(dct.keys()):
        v = dct[k]

        if k == 'audio-bitrate':
            v = float(v) / 1000
            if v % 1 < 0.01:
                v = int(v)
            else:
                v = "%.3f" % v

        if k == 'time':
            v = "%s (%s)" % (v, format_time(int(v) * 1000).split('.')[0])

        if k == 'mtime':
            v = "%s (%s)" % (v, format_time(int(v)))

        lines.append("%s: %s" % (k, v))
    return '\n'.join(lines) + '\n'

class RequestedPlayerNotRunning(Exception):
    pass

class NoPlayersRunning(Exception):
    pass

class MPRISRemote(object):

    def __init__(self):
        self.bus = dbus.SessionBus()
        self.players = [ name for name in self.bus.list_names() if re.match(mpris[0] + '\..+$', name) ]

    def find_player(self, requested):
        if not self.players:
            raise NoPlayersRunning()

        if requested == '*':
            self.name = self.players[0]
        else:
            self.name = mpris[0] + '.' + requested
            if self.name not in self.players:
                raise RequestedPlayerNotRunning()
            self.name = mpris[0] + '.' + requested

        self.obj        = self.bus.get_object(self.name, mpris[4])
        self.root       = dbus.Interface(self.obj, dbus_interface = mpris[0])
        self.player     = dbus.Interface(self.obj, dbus_interface = mpris[1])
        self.tracklist  = dbus.Interface(self.obj, dbus_interface = mpris[3])
        self.properties = dbus.Interface(self.obj, dbus_interface = mpris[5])

#        try:
#            self.tracklist_list = self.properties.Get(self.tracklist, 'Tracks')
#        except dbus.exceptions.DBusException:
#            self.tracklist_list = [ ]

    def _possible_names(self):
        return self.players

    # commands

    # root

    @explain_numargs(0)
    def identity(self):
        try:
            player = self.properties.Get(mpris[0], 'Identity')
        except dbus.exceptions.DBusException:
            player = self.name.replace(mpris[0] + '.', "")
        print player

    @explain_numargs(0)
    def quit(self):
        self.root.Quit()

    # player

    @explain_numargs(0)
    def prev(self):
        self.player.Previous()

    @explain_numargs(0)
    def previous(self):
        self.player.Previous()

    @explain_numargs(0)
    def next(self):
        self.player.Next()

    @explain_numargs(0)
    def stop(self):
        self.player.Stop()

    @explain_numargs(0)
    def play(self):
        self.player.Play()

    @explain_numargs(0)
    def pause(self):
        self.player.Pause()
    
    @explain_numargs(0)
    def toggle(self):
        self.player.PlayPause()

    @explain_numargs(0)
    def metadata(self):
        meta = self.properties.Get(mpris[1], 'Metadata')
        yield format_metadata(meta)

    @explain_numargs(0, 1)
    @explain_argtype(0, is_zero_to_100, optional=True)
    def volume(self, vol=None):
        if vol is not None:
            self.properties.Set(mpris[1], 'Volume', float(vol))
        else:
            print self.properties.Get(mpris[1], 'Volume')

    @explain_numargs(2)
    @explain_argtype(is_int, is_int)
    def setposition(self, track, pos):
        trackid = '%s/Track/trackid' % self.path
        print trackid
        self.player.SetPosition('%s%s' % trackid % int(track), int(pos))

    @explain_numargs(1)
    @explain_argtype(0, is_int)
    def seek(self, pos):
        self.player.Seek(int(pos))

    @explain_numargs(0)
    def playstatus(self):
        status = self.properties.Get(mpris[1], 'PlaybackStatus')
        loopin = self.properties.Get(mpris[1], 'LoopStatus')
        shuffle = self.properties.Get(mpris[1], 'Shuffle')
        yield ("PlayStatus: status"
             + "LoopStatus: %s\n" % ("enabled" if loopin else "disaled")
             + "Random/Shuffle: %s\n" % ("enabled" if shuffle else "disaled"))

    @explain_numargs(0, 1)
    @explain_argtype(0, is_track_num_or_star, optional=True)
    def trackinfo(self, track=None):
        if track == '*':
            for i in self.tracklist_list:
                meta = self.tracklist.GetTracksMetadata(i)
                if meta is not None:
                    yield format_metadata(self.tracklist.GetTracksMetadata(i))
                    yield '\n'
        else:
            if track is not None:
                meta = self.tracklist.GetTracksMetadata(int(track))
            else:
                meta = self.properties.Get(mpris[1], 'Metadata')
                if meta is None:
                    raise NoTrackCurrentlySelected()
                yield format_metadata(meta)

    # tracklist

    @explain_numargs(0)
    def clear(self):
        self.player.Stop()
        for i in range(self.tracklist.GetLength()):
            self.tracklist.DelTrack(0)

    @explain_numargs(1)
    @explain_argtype(0, is_track_num)
    def deltrack(self, pos):
        self.tracklist.DelTrack(int(pos))

    @explain_numargs(1, 2)
    @explain_argtype(0, is_valid_uri)
    @explain_argtype(1, is_boolean, optional=True)
    def addtrack(self, uri, playnow='false'):
        playnow = playnow == 'true'
        if uri == '-':
            for i, line in enumerate(sys.stdin):
                path = line.rstrip('\r\n')

                if not path.strip():
                    continue

                if not (os.path.isfile(path) or os.path.isdir(path)):
                    raise BadUserInput('not a file or directory: %s' % path)

                if playnow and i == 0:
                    self.tracklist.AddTrack(path, True)
                else:
                    self.tracklist.AddTrack(path, False)
        else:
            self.tracklist.AddTrack(uri, playnow)

    @explain_numargs(0)
    def tracknum(self):
        yield str(self.tracklist.GetCurrentTrack()) + '\n'

    @explain_numargs(0)
    def numtracks(self):
        yield str(self.tracklist.GetLength()) + '\n'

    @explain_numargs(0, 1)
    @explain_argtype(0, is_boolean, optional=True)
    def loop(self, on=None):
        if on == 'true':
            self.properties.Set(mpris[1], 'Shuffle', True)
        elif on == 'false':
            self.properties.Set(mpris[1], 'Shuffle', False)
        else:
            status = self.properties.Get(mpris[1], 'Shuffle')
            yield ("true" if status else "false") + '\n'

    @explain_numargs(0, 1)
    @explain_argtype(0, is_boolean, optional=True)
    def shuffle(self, on=None):
        if on == 'true':
            self.properties.Set(mpris[1], 'Shuffle', True)
        elif on == 'false':
            self.properties.Set(mpris[1], 'Shuffle', False)
        else:
            status = self.properties.Get(mpris[1], 'PlaybackStatus')
            yield ("true" if status else "false") + '\n'

    def verbose_status(self):
        """to be compatible with a wide array of implementations (some very
        incorrect/incomplete), we have to do a LOT of extra work here."""

        output = ''

        try:
            status = self.player.GetStatus()
        except dbus.exceptions.DBusException:
            status = None

        try:
            status[0] # dragon player returns a single int, which is wrong
        except TypeError:
            status = None

        try:
            curtrack = self.tracklist.GetCurrentTrack()
        except dbus.exceptions.DBusException:
            curtrack = None

        try:
            pos = self.player.PositionGet()
        except dbus.exceptions.DBusException:
            pos = None

        try:
            meta = self.player.GetMetadata()
            meta = dict(meta) if meta else {}
        except dbus.exceptions.DBusException:
            meta = {}

        if 'mtime' in meta:
            mtime = int(meta['mtime'])
            if abs(mtime - time.time()) < 60*60*24*365*5:
                # if the mtime is within 5 years of right now, which would mean the
                # song is thousands of hours long, then i'm gonna assume that the
                # player is incorrectly using this field for the file's mtime, not
                # the song length. (bmpx does this as of january 2008)
                del meta['mtime']

                # and also, if we know it's bmp, then we can swipe the time field
                if self.player_name == 'bmp':
                    meta['mtime'] = meta['time'] * 1000

        have_status = (status is not None)
        have_curtrack = (curtrack is not None)
        have_listlen = (len(self.tracklist_list) > 0)
        have_player_info = (have_status or have_curtrack or have_listlen)

        have_pos = (pos is not None)
        have_mtime = ('mtime' in meta)
        have_tracknum = ('tracknumber' in meta)
        have_song_info = (have_pos or have_mtime or have_tracknum)

        ##

        if have_player_info:
            output += '['

        if have_status:
            output += "%s" % playstatus_from_int(status[0])
            if have_curtrack:
                output += ' '

        if have_curtrack:
            output += str(curtrack+1)
            if have_listlen:
                output += '/'

        if have_listlen:
            output += str(len(self.tracklist_list))

        if have_player_info:
            output += ']'

        ##

        if have_player_info and have_song_info:
            output += ' '

        ##

        if have_pos or have_mtime:
            output += '@ '
            if have_pos:
                output += format_time(pos).split('.')[0]
            elif have_mtime:
                output += '?'

            if have_mtime:
                output += '/'
                output += format_time(meta['mtime']).split('.')[0]

        if have_tracknum:
            output += ' - #%s' % meta['tracknumber']

        if have_player_info or have_song_info:
            output += '\n'

        ##

        if 'artist' in meta:
            output += '  artist: ' + meta['artist'] + '\n'
        if 'title' in meta:
            output += '  title: ' + meta['title'] + '\n'
        if 'album' in meta:
            output += '  album: ' + meta['album'] + '\n'

        if have_status:
            output += '[repeat %s] [random %s] [loop %s]\n' % (
                "on" if status[2] else "off",
                "on" if status[1] else "off",
                "on" if status[3] else "off",
            )

        return output

if __name__ == '__main__':
    player_name = os.environ.get('MPRIS_PLAYER', '*')

    remote = MPRISRemote()

    import getopt
    shortopt = '?hp:'
    longopt  = ['help', 'player=']

    try:
        opts, args = getopt.gnu_getopt(sys.argv[1:], shortopt, longopt)
    except getopt.GetoptError as e:
        print >>sys.stderr, str(e)
        SystemExit(4)

    for arg, value in opts:
        if arg in ('-h', '--help', '-?'):
            print usage
            raise SystemExit(0)
        elif arg in ('-p', '--player'):
            player_name = value

    try:
        remote.find_player(player_name)
    except RequestedPlayerNotRunning as e:
        print >>sys.stderr, 'Player %s is not running, ' \
        'but the following players were found:' % player_name
        for n in remote.players:
            print >>sys.stderr, "    %s" % n.replace(mpris[0] + '.', "")
        print >>sys.stderr, 'If you meant to use one of those players, ',
        'set $MPRIS_PLAYER accordingly.'
        raise SystemExit(1)
    except NoPlayersRunning:
        print >>sys.stderr, "No MPRIS-2 compliant players found running."
        raise SystemExit(1)

    import locale
    encoding = sys.stdout.encoding or locale.getpreferredencoding() or 'utf-8'

    if len(args) == 0:
        method_name = 'verbose_status'
    else:
        method_name = args[0]
        args=args[1:]

    try:
        output_generator = getattr(remote, method_name)(*args) or []
        for chunk in output_generator:
            sys.stdout.write(chunk.encode(encoding, 'replace'))
    except BadUserInput as e:
        print >>sys.stderr, e
        raise SystemExit(1)
    except NoTrackCurrentlySelected:
        print >>sys.stderr, "No track is currently selected."
    except KeyboardInterrupt:
        raise SystemExit(2)
    else:
        raise SystemExit(0)

#
# vim:fenc=utf-8:ft=python:ci:pi:sts=4:sw=4:ts=4:
#
